<?xml version="1.0" encoding="utf-8"?>
<!-- ===================================================================

   Build file for Neurogrid simulation - for use with the Jakarta Ant java build tool
   
Build targets
    This build file supports the following targets:
    all                  Clean, then create distribution
    clean                Clean build and dist directories
    main                 Build neurogrid simulation components
    javadoc              Build API documentation
    simulation           run a simulation based on parameters in conf/PARAMETERS.properties

If you build a target that depends on other targets, those other targets are created in 
the correct order.

Authors:
  Sam Joseph <sam@neurogrid.com>

Copyright:
  Copyright (c) 2000 Neurogrid.com
  
   $Id: build.xml,v 1.4 2003/06/25 12:22:03 samjoseph Exp $
   
==================================================================== -->

<project name="neurogrid" default="main" basedir=".">

  <!-- ==================== Initialization properties ===================== -->
  
  <property name="build.compiler" value="modern"/>
  <property name="debug" value="on"/>
  <property name="optimize" value="true"/>
  <property name="neurogrid.build" value="build"/>
  <property name="neurogrid.apidoc" value="apidoc"/>
  <property name="packages" value="com.neurogrid.simulation.*"/>

  <!-- ======================== Copy static files ========================= -->
  
  <target name="prepare">
    <tstamp/>

    <!-- Create destination directories -->
    <mkdir dir="${neurogrid.build}"/>
    <mkdir dir="${neurogrid.build}/junit/"/>

  </target>

  <!-- ==================== Main build target  ======================= -->
  <target name="main" depends="prepare">

    <!-- Compile the standard components -->
    <javac srcdir="src" destdir="${neurogrid.build}"
           debug="${debug}" 
           optimize="${optimize}"
           deprecation="off" >
      <classpath>
        <pathelement path="${classpath}"/>
        <pathelement location="lib/neurogrid_parser_01_01.jar"/>

        <fileset dir="lib">
          <include name="*.jar"/>
        </fileset>

      </classpath>
    </javac>
    
    <!-- Compile the test components -->
    <javac srcdir="junit" destdir="${neurogrid.build}/junit/"
           debug="${debug}" 
           optimize="${optimize}"
           deprecation="off" >
      <classpath>
        <pathelement path="${classpath}"/>
        <pathelement path="${neurogrid.build}"/>
        <pathelement location="lib/neurogrid_parser_01_01.jar"/>

        <fileset dir="lib">
          <include name="*.jar"/>
        </fileset>

      </classpath>
    </javac>

  </target>

<!--
    <copy todir="${neurogrid.build}">
      <fileset dir="src">
        <include name="**/*.class"/> -->
      <!--  <exclude name="**/*.java"/> -->
      <!--  <exclude name="**/*.java.bak"/> -->
   <!--    </fileset>
    </copy> -->


<!-- =================================================================== -->
<!-- Defines the classpath used for compilation and test.                -->
<!-- =================================================================== -->

    <property name="src.dir" value="src" />
    <property name="jars.dir" value="lib" />
    <property name="turbine_jars.dir" value="d:/jakarta-tomcat-4.0.3/webapps/tristero/WEB-INF/lib" />

    <property name="classes.dir" value="classes" />

<path id="base.classpath">
    <fileset dir="${jars.dir}.">
        <include name="*.jar"/>
    </fileset>
    <pathelement location="${classpath}" />
  <!--  <pathelement location="${classes.remote_dir}" /> -->
</path>


  <!-- =================================================================== -->
  <!-- C R E A T E     P A C K A G E                                       -->
  <!-- =================================================================== -->

    <property name="versionString" value="0.2.1"/>

    <target	name="package"
		description="create a simulator package.">

        <property name="dist" value="dist"/>


        <mkdir dir="${dist}"/>

        <tstamp>
    	<format property="TODAY" pattern="yyyyMMdd" locale="en"/>
    	<format property="TODAY_STRING" pattern="MMM dd, yyyy"/>
	</tstamp>
	
	<property name="version" value="${versionString}-${TODAY}"/>
	<property name="displayVersion" value="&quot;${versionString} (Integration Build ${TODAY_STRING})&quot;"/>
	<echo message="version=${version}"/>
	<echo message="displayVersion=${displayVersion}"/>
  
  <!-- so then we could have something here that packed up a tar.gz file here ready for release
       could even try and automate hitting sourceforge with everything - well maybe some of it -->

  <!-- need to remove my remote params from the properties files-->
  <!-- need to look again at the ng-core in sourceforge to see what I had setup for mckoi etc ... -->
  <!-- ah - the data for mckoi can be created automatically and then the db generated with ant commands -->
  <!-- need to select correct readme, properties file etc - same for cvs???-->

      <tar tarfile="${dist}/ng-simulator_${version}.tar">
       
           <tarfileset dir="../"> 
             <include name="P2PSimulator/lib/*.jar"/>
             <include name="P2PSimulator/src/**/*.java"/>
             <include name="P2PSimulator/junit/**/*.java"/>
             <include name="P2PSimulator/ant/**/*"/>
             <include name="P2PSimulator/build.xml"/>
             <include name="P2PSimulator/conf/*.properties"/>
             <include name="P2PSimulator/READ_ME"/>
             <include name="P2PSimulator/neurogrid_applet_screen_shot.gif"/>
             <include name="P2PSimulator/applet.html"/>
             <include name="P2PSimulator/applet_explanation.html"/>
             <include name="build"/>
             <exclude name="**/*.bak"/>
             <exclude name="*/CVS/**"/>
             <exclude name="**/CVS"/>
             <exclude name="P2PSimulator/apidoc/**/*"/>
             <exclude name="P2PSimulator/old_logs/**/*"/>
             <exclude name="P2PSimulator/torii/**/*"/>
           </tarfileset>
       </tar> 
  
      <gzip zipfile="${dist}/ng-simulator_${version}.tar.gz" src="${dist}/ng-simulator_${version}.tar"/>
      <delete file="${dist}/ng-simulator_${version}.tar"/>
  </target>   
  


  <!-- =================================================================== -->
  <!-- R U N  T E S T S                                                    -->
  <!-- =================================================================== -->
    <target	name="testall"
		description="Run all unit tests."
		depends="main">
    <property name="build.dest" value="build"/>
    <junit haltonerror="no" haltonfailure="no" fork="yes">

      <sysproperty key="Log4jConfig" file="./conf/log4j.properties"/>
      <sysproperty key="test.method" value="${test.method}"/>
     
      <classpath>      
        <pathelement location="${build.dest}"/>
        <pathelement location="${build.dest}/junit/"/>
        <pathelement location="lib/JSX1.0.6.0.jar"/>
        <fileset dir="lib">
          <include name="**/*.jar"/>
          <include name="JSX1.0.6.0.jar"/>
        </fileset>
      </classpath>
      <formatter type="plain" usefile="false"/>
      
      	<test name="${test.class}" haltonerror="no" if="test.class"/> 

	<batchtest unless="test.class">
	    <fileset dir="${build.dest}/junit/">
		<include name="com/neurogrid/simulation/*Test.class" />
	    </fileset>
	</batchtest> 

<!--	<test name="com.neurogrid.test.JSXTest" haltonerror="yes" /> -->
<!--	<test name="com.neurogrid.test.SimpleKeywordTest" haltonerror="yes" /> -->
<!--	<test name="com.neurogrid.test.SimulatorTestSuite" haltonerror="yes" /> -->

    </junit>
    </target>
    
    <target	name="testmethod"
		description="Run a specific unit test method."
		depends="main">
    <property name="build.dest" value="build"/>
    
    <java classname="${test.class}" fork="yes" >
      <jvmarg value="-Dtest.method=${test.method}"/> 
      <jvmarg value="-DLog4jConfig=./conf/log4j.properties"/> 
      <classpath>      
        <pathelement location="${build.dest}"/>
        <pathelement location="${build.dest}/junit/"/>
        <pathelement location="lib/JSX1.0.6.0.jar"/>
        <fileset dir="lib">
          <include name="**/*.jar"/>
          <include name="JSX1.0.6.0.jar"/>
        </fileset>
      </classpath>      
    </java>
    
    </target>
  
  <!-- ==================== Run targets  ======================= -->

    <target	name="simulation"
		description="Run a simulation."
		depends="main">
    <property name="build.dest" value="build"/>
    
    <java classname="com.neurogrid.simulation.Simulation" fork="yes" >
      <jvmarg value="-DLog4jConfig=./conf/log4j.properties"/> 
      <classpath>      
        <pathelement location="${build.dest}"/>
        <pathelement location="${build.dest}/junit/"/>
        <pathelement location="lib/JSX1.0.6.0.jar"/>
        <fileset dir="lib">
          <include name="**/*.jar"/>
          <include name="JSX1.0.6.0.jar"/>
        </fileset>
      </classpath>      
    </java>
    
    </target>

    <target	name="simulation-stat"
		description="Run a simulation with statistics."
		depends="main">
    <property name="build.dest" value="build"/>
    
    <java classname="com.neurogrid.simulation.AdvancedSimulation" fork="yes" >
      <jvmarg value="-DLog4jConfig=./conf/log4j.properties"/> 
      <classpath>      
        <pathelement location="${build.dest}"/>
        <pathelement location="${build.dest}/junit/"/>
        <pathelement location="lib/JSX1.0.6.0.jar"/>
        <fileset dir="lib">
          <include name="**/*.jar"/>
          <include name="JSX1.0.6.0.jar"/>
        </fileset>
      </classpath>      
    </java>
    
    </target>
    
 <!-- ==================== cvs targets  ======================= -->
    
    
  <target name="update">  
  <!--
   <cvspass cvsroot=":ext:samjoseph@cvs.sourceforge.net:/cvsroot/neurogrid/"
       password="???????"
       passfile="./.cvspass"
    /> -->
  <!-- seems like best way to achieve this might be to have shell scripts ?? batch scripts?? -->
    <cvs command="-z3 update"
         cvsRoot=":ext:samjoseph@cvs.sourceforge.net:/cvsroot/neurogrid/"
         cvsRsh="ssh"
         dest="."
         passfile="./.cvspass"
    />
  </target>  

  <!-- ==================== Administrative targets  ======================= -->
  
  <target name="clean">
    <delete dir="${neurogrid.build}"/>
    <delete dir="${neurogrid.apidoc}"/>
  </target>


  <target name="all" depends="clean,javadoc"/>

  <!-- ==================== Creates the API sim documentation  ================ -->
  <target name="javadoc">
    <mkdir dir="${neurogrid.apidoc}"/>
    <javadoc packagenames="${packages}"
             sourcepath="src"
             destdir="${neurogrid.apidoc}"
             author="true"
             version="true"
             use="true"
             splitindex="true"
             noindex="false"
             windowtitle="NeuroGrid Simulation Package API"
             doctitle="API Documentation for NeuroGrid Simulation Classes"
    />
  </target>

  <!-- =============================== Help =============================== -->
  <target name="help">
    <echo message=""/>
    <echo message="ANT build targets for NeuroGrid Simulator"/>
    <echo message=""/>
    <echo message="The following targets are available:"/>
    <echo message="  all                  Clean, then create distribution"/>
    <echo message="  clean                Clean build and dist directories"/>
    <echo message="  main                 Build neurogrid components"/>
    <echo message="  simulation           run a simulation based on parameters in conf/PARAMETERS.properties"/>
    <echo message="  javadoc              Build API documentation"/>
  </target>

</project>
