package com.neurogrid.simulation;

import junit.framework.TestCase;
// JUnitDoclet begin import
import com.neurogrid.simulation.SimpleKeyword;
// JUnitDoclet end import

/**
* Generated by JUnitDoclet, a tool provided by
* ObjectFab GmbH under LGPL.
* Please see www.junitdoclet.org, www.gnu.org
* and www.objectfab.de for informations about
* the tool, the licence and the authors.
*/


public class SimpleKeywordTest
// JUnitDoclet begin extends_implements
extends TestCase
// JUnitDoclet end extends_implements
{
  // JUnitDoclet begin class
  com.neurogrid.simulation.SimpleKeyword[] simplekeyword = null;
  public static final int NO_TEST_KEYWORDS = 3;
  // JUnitDoclet end class
  
  public SimpleKeywordTest(String name) {
    // JUnitDoclet begin method SimpleKeywordTest
    super(name);
    SimpleKeyword.init(System.getProperty("Log4jConfig"));
    // JUnitDoclet end method SimpleKeywordTest
  }
  
  public com.neurogrid.simulation.SimpleKeyword[] createInstance() throws Exception {
    // JUnitDoclet begin method testcase.createInstance
    // bloody hell - every time I will lose the [] above .......... FIXXXXXXXXX
    SimpleKeyword[] x_keyword = new SimpleKeyword[NO_TEST_KEYWORDS];
    //create ten keywords here and store them in an array ....
    for(int i=0,j=1;i<NO_TEST_KEYWORDS;i++,j++)
    {
      x_keyword[i] = new SimpleKeyword();	
    }
    return x_keyword;
    // JUnitDoclet end method testcase.createInstance
  }
  
  protected void setUp() throws Exception {
    // JUnitDoclet begin method testcase.setUp
    super.setUp();
    simplekeyword = createInstance();
    // JUnitDoclet end method testcase.setUp
  }
  
  protected void tearDown() throws Exception {
    // JUnitDoclet begin method testcase.tearDown
    simplekeyword = null;
    super.tearDown();
    // JUnitDoclet end method testcase.tearDown
  }
  
  public void testGetCvsInfo() throws Exception {
    // JUnitDoclet begin method getCvsInfo
    // JUnitDoclet end method getCvsInfo
  }
  
  public void testInit() throws Exception {
    // JUnitDoclet begin method init
    // JUnitDoclet end method init
  }
  
  public void testGetFormattedKeywordID() throws Exception {
    // JUnitDoclet begin method getFormattedKeywordID
    
    long x_long_value = 5;
    String x_key_id = SimpleKeyword.getFormattedKeywordID(x_long_value);
    //System.out.println(x_key_id);
    assertTrue(x_key_id.equals(SimpleKeyword.o_id_head+SimpleKeyword.o_df.format(x_long_value)));
    
    // JUnitDoclet end method getFormattedKeywordID
  }
  
  public void testToString() throws Exception {
    // JUnitDoclet begin method toString
    //fail();
    // JUnitDoclet end method toString
  }
  
  public void testEquals() throws Exception {
    // JUnitDoclet begin method equals
    for(int i=0,j=1;i<NO_TEST_KEYWORDS;i++,j++)
    {    
      assertTrue(simplekeyword[i].equals(simplekeyword[i]));
    }
    // JUnitDoclet end method equals
  }
  
  
  
  /**
  * JUnitDoclet moves marker to this method, if there is not match
  * for them in the regenerated code and if the marker is not empty.
  * This way, no test gets lost when regenerating after renaming.
  * Method testVault is supposed to be empty.
  */
  public void testVault() throws Exception {
    // JUnitDoclet begin method testcase.testVault
    // JUnitDoclet end method testcase.testVault
  }
  
  public static void main(String[] args) {
    // JUnitDoclet begin method testcase.main
    junit.textui.TestRunner.run(SimpleKeywordTest.class);
    // JUnitDoclet end method testcase.main
  }
}
