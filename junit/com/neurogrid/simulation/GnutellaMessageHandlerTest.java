package com.neurogrid.simulation;

import java.util.Random;

import junit.framework.TestCase;
import junit.framework.TestSuite;

import com.neurogrid.simulation.root.ContentMessage;
import com.neurogrid.simulation.root.Network;
import com.neurogrid.simulation.root.Node;
// JUnitDoclet end import

/**
* Generated by JUnitDoclet, a tool provided by
* ObjectFab GmbH under LGPL.
* Please see www.junitdoclet.org, www.gnu.org
* and www.objectfab.de for informations about
* the tool, the licence and the authors.
*/


public class GnutellaMessageHandlerTest
// JUnitDoclet begin extends_implements
extends TestCase
// JUnitDoclet end extends_implements
{
  // JUnitDoclet begin class
  com.neurogrid.simulation.GnutellaMessageHandler gnutellamessagehandler = null;
  com.neurogrid.simulation.GnutellaNetwork gnutellanetwork = null;
  // JUnitDoclet end class
  
  public GnutellaMessageHandlerTest(String name) {
    // JUnitDoclet begin method GnutellaMessageHandlerTest
    super(name);
    GnutellaMessageHandler.init(System.getProperty("Log4jConfig"));
    // JUnitDoclet end method GnutellaMessageHandlerTest
  }
  
  public com.neurogrid.simulation.GnutellaMessageHandler createInstance() throws Exception {
    // JUnitDoclet begin method testcase.createInstance
    gnutellanetwork = new GnutellaNetwork();
    return new com.neurogrid.simulation.GnutellaMessageHandler(new Random(888));
    // JUnitDoclet end method testcase.createInstance
  }
  
  protected void setUp() throws Exception {
    // JUnitDoclet begin method testcase.setUp
    super.setUp();
    gnutellamessagehandler = createInstance();
    // JUnitDoclet end method testcase.setUp
  }
  
  protected void tearDown() throws Exception {
    // JUnitDoclet begin method testcase.tearDown
    gnutellamessagehandler = null;
    super.tearDown();
    // JUnitDoclet end method testcase.tearDown
  }
  
  public void testInit() throws Exception {
    // JUnitDoclet begin method init
    // JUnitDoclet end method init
  }
  
  public void testHandleMessage() throws Exception {
    // JUnitDoclet begin method handleMessage
    // 1. Update stats re message transfer
    // 2. Check whether message has been seen
    // 3. Update node activity stats
    // 4. remove message from previous nodes message box ??
    // 5. check for a local match
    // 6. check message TTL
    // 7. add message to all connected nodes (except the one we received from )
    // each of the above should be individual methods that we test ...

    SimpleKeyword[][] x_keywords = new SimpleKeyword[3][3];
    
    for(int i=0;i<3;i++)
    {
      for(int j=0;j<3;j++)
      {
        x_keywords[i][j] = new SimpleKeyword();	
      }
    }	
     
    SimpleDocument[] x_doc = new SimpleDocument[3];
    ContentMessage x_message[] = new SimpleContentMessage[3];
    
    Node x_node[] = new GnutellaNode[4];
    for(int i=0;i<4;i++)
    {
      x_node[i] = new GnutellaNode(gnutellanetwork,new Random(888));
    }
    
    
    x_node[0].addConnection(x_node[1]);
    x_node[0].addConnection(x_node[2]);
    x_node[0].addConnection(x_node[3]);
    
    for(int k=0;k<3;k++)
    {
      x_doc[k] = new SimpleDocument(x_keywords[k]);	
      x_message[k] = new SimpleContentMessage(3,x_doc[k].getKeywords(),x_doc[k],x_node[3]);
      x_message[k].setPreviousLocation(x_node[3]);
    }

    x_node[0].addContent(x_doc[0]);  
    
    assertTrue("failed to successfully handle message",
               gnutellamessagehandler.handleMessage(x_message[1],x_node[0]));

    assertTrue("node not activated",x_node[0].getActive());

    assertTrue("Connected Node failed to receive message of correct type",
               x_node[1].inboxContainsMessage(x_message[1]).equals("com.neurogrid.simulation.SimpleContentMessage"));
    assertTrue("Connected Node failed to receive message of correct type",
               x_node[2].inboxContainsMessage(x_message[1]).equals("com.neurogrid.simulation.SimpleContentMessage"));
    assertTrue("Connected Node that sent message re-received message",
               x_node[3].inboxContainsMessage(x_message[1]) == null);
    assertTrue("initial node still has message",
               x_node[0].inboxContainsMessage(x_message[1]) == null);
    // not sure if this last makes sense if we are not passing
    // through inbox to begin with ...           
               
    // outstanding question is how many variations do we check here ...?
    // I guess we need to check all four possible outcomes ...?
    // maybe leave that till later as we really need to get this
    // dishonest network working                
    
    
    
    
    // having done that we need to test the combined methods through the handleMessage
    // method of the handler, then the node and then start looking at how to construct a
    // network given the new approach to messages (i.e. not creating new objects)
    // and the handlers etc.
    
    // JUnitDoclet end method handleMessage
  }

  
  public void testHandleFuzzyMessage() throws Exception {
    // JUnitDoclet begin method handleMessage
    // 1. Update stats re message transfer
    // 2. Check whether message has been seen
    // 3. Update node activity stats
    // 4. remove message from previous nodes message box ??
    // 5. check for a local match
    // 6. check message TTL
    // 7. add message to all connected nodes (except the one we received from )
    // each of the above should be individual methods that we test ...

    SimpleKeyword[][] x_keywords = new SimpleKeyword[3][3];
    
    for(int i=0;i<3;i++)
    {
      for(int j=0;j<3;j++)
      {
        x_keywords[i][j] = new SimpleKeyword();	
      }
    }	
     
    SimpleDocument[] x_doc = new SimpleDocument[3];
    ContentMessage x_message[] = new FuzzyContentMessage[3];
    
    Node x_node[] = new GnutellaNode[4];
    for(int i=0;i<4;i++)
    {
      x_node[i] = new GnutellaNode(gnutellanetwork,new Random(888));
    }
    
    
    x_node[0].addConnection(x_node[1]);
    x_node[0].addConnection(x_node[2]);
    x_node[0].addConnection(x_node[3]);
    
    for(int k=0;k<3;k++)
    {
      x_doc[k] = new SimpleDocument(x_keywords[k]);	
      x_message[k] = new FuzzyContentMessage(3,x_doc[k].getKeywords(),x_node[3]);
      x_message[k].setPreviousLocation(x_node[3]);
    }

    x_node[0].addContent(x_doc[0]);  
    
    assertTrue("failed to successfully handle message",
               gnutellamessagehandler.handleMessage(x_message[1],x_node[0]));

    assertTrue("node not activated",x_node[0].getActive());

    assertTrue("Connected Node failed to receive message of correct type",
               x_node[1].inboxContainsMessage(x_message[1]).equals("com.neurogrid.simulation.FuzzyContentMessage"));
    assertTrue("Connected Node failed to receive message of correct type",
               x_node[2].inboxContainsMessage(x_message[1]).equals("com.neurogrid.simulation.FuzzyContentMessage"));
    assertTrue("Connected Node that sent message re-received message",
               x_node[3].inboxContainsMessage(x_message[1]) == null);
    assertTrue("initial node still has message",
               x_node[0].inboxContainsMessage(x_message[1]) == null);
    // not sure if this last makes sense if we are not passing
    // through inbox to begin with ...           
               
    // outstanding question is how many variations do we check here ...?
    // I guess we need to check all four possible outcomes ...?
    // maybe leave that till later as we really need to get this
    // dishonest network working                
    
    
    
    
    // having done that we need to test the combined methods through the handleMessage
    // method of the handler, then the node and then start looking at how to construct a
    // network given the new approach to messages (i.e. not creating new objects)
    // and the handlers etc.
    
    // JUnitDoclet end method handleMessage
  }
  
  public void testInjectMessage() throws Exception {
    // JUnitDoclet begin method injectMessage

    // 6. check message TTL
    // 7. add message to all connected nodes (except the one we received from )

    // JUnitDoclet end method injectMessage
  }
  
  public void testSeenMessage() throws Exception {
    // JUnitDoclet begin method seenMessage
    // need to put in a message twice in a row to see if 
    // message ids are being stored

    SimpleKeyword[] x_keywords = new SimpleKeyword[10];
    
    for(int i=0;i<10;i++)
    {
      x_keywords[i] = new SimpleKeyword();	
    }	
     
    SimpleDocument x_doc = new SimpleDocument(x_keywords);

    Node x_node = new GnutellaNode(gnutellanetwork,new Random(888));
    ContentMessage x_message = new SimpleContentMessage(3,x_doc.getKeywords(),x_doc,x_node);  
    
    assertTrue("unseen message indicated seen",!gnutellamessagehandler.seenMessage(x_message,x_node));
    assertTrue("seen message indicated unseen",gnutellamessagehandler.seenMessage(x_message,x_node));
    
    // JUnitDoclet end method seenMessage
  }
  
  public void testProcessCommit() throws Exception {
    // JUnitDoclet begin method processCommit
    // JUnitDoclet end method processCommit
  }
  
  public void testCheckLocalMatch() throws Exception {
    // JUnitDoclet begin method checkLocalMatch
    
    SimpleKeyword[][] x_keywords = new SimpleKeyword[3][3];
    
    for(int i=0;i<3;i++)
    {
      for(int j=0;j<3;j++)
      {
        x_keywords[i][j] = new SimpleKeyword();	
      }
    }	
     
    SimpleDocument[] x_doc = new SimpleDocument[3];
    ContentMessage x_message[] = new SimpleContentMessage[3];
    Node x_node = new GnutellaNode(gnutellanetwork,new Random(888)); 
    int x_message_ttl = 3;
    
    for(int k=0;k<3;k++)
    {
      x_doc[k] = new SimpleDocument(x_keywords[k]);	
      x_message[k] = new SimpleContentMessage(x_message_ttl,x_doc[k].getKeywords(),x_doc[k],x_node);
    }

    x_node.addContent(x_doc[0]);  
    
    assertTrue("local doc not matched",gnutellamessagehandler.checkLocalMatch(x_message[0],x_node)); 
    assertTrue("absent doc falsely matched",!gnutellamessagehandler.checkLocalMatch(x_message[1],x_node)); 
    assertTrue("absent doc falsely matched",!gnutellamessagehandler.checkLocalMatch(x_message[2],x_node)); 

    assertTrue("number of matches incorrect: ",Network.o_no_matches==1);
    assertTrue("number of false matches incorrect",Network.o_no_false_matches==0);
    assertTrue("first ttl incorrect",Network.o_TTL_of_first_match==x_message_ttl);   
    
    // JUnitDoclet end method checkLocalMatch
  }
  
  
  public void testCheckFuzzyLocalMatch() throws Exception {
    // JUnitDoclet begin method checkFuzzyLocalMatch
    
    SimpleKeyword[][] x_keywords = new SimpleKeyword[3][3];
    
    for(int i=0;i<3;i++)
    {
      for(int j=0;j<3;j++)
      {
        x_keywords[i][j] = new SimpleKeyword();	
      }
    }	
     
    SimpleDocument[] x_doc = new SimpleDocument[3];
    ContentMessage x_message[] = new FuzzyContentMessage[3];
    Node x_node = new GnutellaNode(gnutellanetwork,new Random(888)); 
    int x_message_ttl = 3;
     
    for(int k=0;k<3;k++)
    {
      x_doc[k] = new SimpleDocument(x_keywords[k]);	
      x_message[k] = new FuzzyContentMessage(x_message_ttl,x_doc[k].getKeywords(),x_node);
    }

    x_node.addContent(x_doc[0]);  
    
    assertTrue("local doc not matched",gnutellamessagehandler.checkFuzzyLocalMatch(x_message[0],x_node)); 
    assertTrue("absent doc falsely matched",!gnutellamessagehandler.checkFuzzyLocalMatch(x_message[1],x_node)); 
    assertTrue("absent doc falsely matched",!gnutellamessagehandler.checkFuzzyLocalMatch(x_message[2],x_node)); 
    
    
    System.out.println("Network.o_no_matches: "+Network.o_no_matches);
    System.out.println("Network.o_no_false_matches: "+Network.o_no_false_matches);
    System.out.println("Network.o_TTL_of_first_match: "+Network.o_TTL_of_first_match); 
      
    assertTrue("number of matches incorrect: ",Network.o_no_matches==1);
    assertTrue("number of false matches incorrect",Network.o_no_false_matches==0);
    assertTrue("first ttl incorrect",Network.o_TTL_of_first_match==x_message_ttl);      
    // JUnitDoclet end method checkFuzzyLocalMatch
  }
  
  public void testCheckMessageTTL() throws Exception {
    // JUnitDoclet begin method checkMessageTTL

    SimpleKeyword[][] x_keywords = new SimpleKeyword[3][3];
    
    for(int i=0;i<3;i++)
    {
      for(int j=0;j<3;j++)
      {
        x_keywords[i][j] = new SimpleKeyword();	
      }
    }	
     
    SimpleDocument[] x_doc = new SimpleDocument[3];
    ContentMessage x_message[] = new SimpleContentMessage[3];
    Node x_node = new GnutellaNode(gnutellanetwork,new Random(888)); 
    
    for(int k=0;k<3;k++)
    {
      x_doc[k] = new SimpleDocument(x_keywords[k]);	
      x_message[k] = new SimpleContentMessage((k==0?1:k),x_doc[k].getKeywords(),x_doc[k],x_node);
    }
    
    //create messages with TTL of 1 and not 1 and check we get the right responses
    
    //assertTrue("TTL less than one accepted",!gnutellamessagehandler.checkMessageTTL(x_message[0],x_node));
    assertTrue("TTL of one accepted",!gnutellamessagehandler.checkMessageTTL(x_message[1],x_node));
    assertTrue("TTL greater than one rejected",gnutellamessagehandler.checkMessageTTL(x_message[2],x_node));
    
    // JUnitDoclet end method checkMessageTTL
  }
  
  public void testForwardMessage() throws Exception {
    // JUnitDoclet begin method forwardMessage
    // we should check that the message is passed to all the nodes connected to a single node

    Node x_node[] = new GnutellaNode[4];
    for(int i=0;i<4;i++)
    {
      x_node[i] = new GnutellaNode(gnutellanetwork,new Random(888));
    }
    
    
    x_node[0].addConnection(x_node[1]);
    x_node[0].addConnection(x_node[2]);
    x_node[0].addConnection(x_node[3]);

    SimpleKeyword[] x_keywords = new SimpleKeyword[10];
    
    for(int i=0;i<10;i++)
    {
      x_keywords[i] = new SimpleKeyword();	
    }	
     
    SimpleDocument x_doc = new SimpleDocument(x_keywords);

    ContentMessage x_message = new SimpleContentMessage(3,x_doc.getKeywords(),x_doc,x_node[3]); 
    x_message.setPreviousLocation(x_node[3]);
    
    gnutellamessagehandler.forwardMessage(x_message,x_node[0]);
    
    assertTrue("Connected Node failed to receive message of correct type",
               x_node[1].inboxContainsMessage(x_message).equals("com.neurogrid.simulation.SimpleContentMessage"));
    assertTrue("Connected Node failed to receive message of correct type",
               x_node[2].inboxContainsMessage(x_message).equals("com.neurogrid.simulation.SimpleContentMessage"));
    assertTrue("Connected Node that sent message re-received message",
               x_node[3].inboxContainsMessage(x_message) == null);

    
    // JUnitDoclet end method forwardMessage
  }
    
  public void testForwardFuzzyMessage() throws Exception {
    // JUnitDoclet begin method forwardMessage
    // we should check that the message is passed to all the nodes connected to a single node

    Node x_node[] = new GnutellaNode[4];
    for(int i=0;i<4;i++)
    {
      x_node[i] = new GnutellaNode(gnutellanetwork,new Random(888));
    }
    
    
    x_node[0].addConnection(x_node[1]);
    x_node[0].addConnection(x_node[2]);
    x_node[0].addConnection(x_node[3]);

    SimpleKeyword[] x_keywords = new SimpleKeyword[10];
    
    for(int i=0;i<10;i++)
    {
      x_keywords[i] = new SimpleKeyword();	
    }	
     
    SimpleDocument x_doc = new SimpleDocument(x_keywords);

    ContentMessage x_message = new FuzzyContentMessage(3,x_doc.getKeywords(),x_node[3]); 
    x_message.setPreviousLocation(x_node[3]);
    
    gnutellamessagehandler.forwardMessage(x_message,x_node[0]);
    
    assertTrue("Connected Node failed to receive message of correct type",
               x_node[1].inboxContainsMessage(x_message).equals("com.neurogrid.simulation.FuzzyContentMessage"));
    assertTrue("Connected Node failed to receive message of correct type",
               x_node[2].inboxContainsMessage(x_message).equals("com.neurogrid.simulation.FuzzyContentMessage"));
    assertTrue("Connected Node that sent message re-received message",
               x_node[3].inboxContainsMessage(x_message) == null);
               
    // this fails to check the type of message

    
    // JUnitDoclet end method forwardMessage
  }
  
  
  
  /**
  * JUnitDoclet moves marker to this method, if there is not match
  * for them in the regenerated code and if the marker is not empty.
  * This way, no test gets lost when regenerating after renaming.
  * Method testVault is supposed to be empty.
  */
  public void testVault() throws Exception {
    // JUnitDoclet begin method testcase.testVault
    // JUnitDoclet end method testcase.testVault
  }
  
  public static void main(String[] args) {
    // JUnitDoclet begin method testcase.main
    String x_method = System.getProperty("test.method");
    System.out.println("test.method="+x_method);
    if(x_method == null || x_method.equals(""))
    {
      System.out.println("testing all methods");
    
      junit.textui.TestRunner.run(GnutellaMessageHandlerTest.class);
    }
    else
    {
      System.out.println("testing single method");

      TestSuite suite = new TestSuite();
      suite.addTest(new GnutellaMessageHandlerTest(x_method));
      junit.textui.TestRunner.run(suite);
    }    // JUnitDoclet end method testcase.main
  }
}
