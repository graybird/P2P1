package com.neurogrid.simulation;

import junit.framework.TestCase;
// JUnitDoclet begin import
import com.neurogrid.simulation.NeuroGridNode;
import com.neurogrid.simulation.SimpleDocument;
import com.neurogrid.simulation.SimpleContentMessage;
import com.neurogrid.simulation.SimpleKeyword;
import com.neurogrid.simulation.NeuroGridRating;
import com.neurogrid.simulation.root.ContentMessage;
import com.neurogrid.simulation.root.Node;
import com.neurogrid.simulation.root.Keyword;
import com.neurogrid.simulation.root.Document;
import junit.framework.TestSuite;
import java.util.Set;
import java.util.TreeSet;
import java.util.Vector;
import java.util.Iterator;
import java.util.Random;
// JUnitDoclet end import

/**
* Generated by JUnitDoclet, a tool provided by
* ObjectFab GmbH under LGPL.
* Please see www.junitdoclet.org, www.gnu.org
* and www.objectfab.de for informations about
* the tool, the licence and the authors.
*/


public class NeuroGridNodeTest
// JUnitDoclet begin extends_implements
extends TestCase
// JUnitDoclet end extends_implements
{
  // JUnitDoclet begin class
  com.neurogrid.simulation.NeuroGridNode neurogridnode = null;
  com.neurogrid.simulation.NeuroGridNetwork neurogridnetwork = null;
  // JUnitDoclet end class
  
  public NeuroGridNodeTest(String name) {
    // JUnitDoclet begin method NeuroGridNodeTest
    super(name);
    NeuroGridNode.init(System.getProperty("Log4jConfig"));
    // JUnitDoclet end method NeuroGridNodeTest
  }
  
  public com.neurogrid.simulation.NeuroGridNode createInstance() throws Exception {
    // JUnitDoclet begin method testcase.createInstance
    neurogridnetwork = new NeuroGridNetwork();
    return new com.neurogrid.simulation.NeuroGridNode(neurogridnetwork,new Random(888),4,2,12);
    // JUnitDoclet end method testcase.createInstance
  }
  
  protected void setUp() throws Exception {
    // JUnitDoclet begin method testcase.setUp
    super.setUp();
    neurogridnode = createInstance();
    // JUnitDoclet end method testcase.setUp
  }
  
  protected void tearDown() throws Exception {
    // JUnitDoclet begin method testcase.tearDown
    neurogridnode = null;
    super.tearDown();
    // JUnitDoclet end method testcase.tearDown
  }
  
  public void testGetCvsInfo() throws Exception {
    // JUnitDoclet begin method getCvsInfo
    // JUnitDoclet end method getCvsInfo
  }
  
  public void testInit() throws Exception {
    // JUnitDoclet begin method init
    // JUnitDoclet end method init
  }
  
  public void testGetNewNodeID() throws Exception {
    // JUnitDoclet begin method getNewNodeID
    // JUnitDoclet end method getNewNodeID
  }
  
  public void testToString() throws Exception {
    // JUnitDoclet begin method toString
    // JUnitDoclet end method toString
  }
  
  public void testAddMessageToInbox() throws Exception {
    // JUnitDoclet begin method addMessageToInbox
    
    Keyword[] x_keywords = new SimpleKeyword[3];
    
    for(int i=0;i<3;i++)
    {
      x_keywords[i] = new SimpleKeyword();	
    }	
     
    Document x_doc = new SimpleDocument(x_keywords);
    Node x_node = new NeuroGridNode(neurogridnetwork,new Random(888),4,2,12);
    ContentMessage x_message = new SimpleContentMessage(3,x_doc.getKeywords(),x_doc,x_node);
    neurogridnode.addMessageToInbox(x_message);
    assertTrue("message location not updated",x_message.getLocation() == neurogridnode);
    assertTrue("message of correct type not in inbox",
               neurogridnode.inboxContainsMessage(x_message).equals("com.neurogrid.simulation.SimpleContentMessage"));
    // JUnitDoclet end method addMessageToInbox
  }
  
  public void testDoGraphics() throws Exception {
    // JUnitDoclet begin method doGraphics
    // JUnitDoclet end method doGraphics
  }
  
  public void testDoGraphics2() throws Exception {
    // JUnitDoclet begin method doGraphics2
    // JUnitDoclet end method doGraphics2
  }
  
  public void testProcessMessage() throws Exception {
    // JUnitDoclet begin method processMessage
    // JUnitDoclet end method processMessage
  }
  
  public void testSetInactive() throws Exception {
    // JUnitDoclet begin method setInactive
    assertTrue("node already active",!neurogridnode.getActive());
    
    neurogridnode.setActive();
    
    assertTrue("node not active",neurogridnode.getActive());
    assertTrue("node not added to active set",neurogridnetwork.activeNodeContains(neurogridnode));
    
    neurogridnode.setInactive();
    
    assertTrue("node not inactive",!neurogridnode.getActive());
    assertTrue("node still in active set",!neurogridnetwork.activeNodeContains(neurogridnode));
    // JUnitDoclet end method setInactive
  }
  
  public void testSetActive() throws Exception {
    // JUnitDoclet begin method setActive
    assertTrue("node already active",!neurogridnode.getActive());
    
    neurogridnode.setActive();
    
    assertTrue("node not active",neurogridnode.getActive());
    assertTrue("node not added to active set",neurogridnetwork.activeNodeContains(neurogridnode));
    // JUnitDoclet end method setActive
  }
  
  public void testGetActive() throws Exception {
    // JUnitDoclet begin method getActive
    // JUnitDoclet end method getActive
  }
  
  public void testGetNodeID() throws Exception {
    // JUnitDoclet begin method getNodeID
    // JUnitDoclet end method getNodeID
  }
  
  public void testGetNoConnections() throws Exception {
    // JUnitDoclet begin method getNoConnections
    // JUnitDoclet end method getNoConnections
  }
  
  public void testGetNoContents() throws Exception {
    // JUnitDoclet begin method getNoContents
    // JUnitDoclet end method getNoContents
  }
  
  public void testGetNoKnowledge() throws Exception {
    // JUnitDoclet begin method getNoKnowledge
    // JUnitDoclet end method getNoKnowledge
  }
  
  public void testGetTotalNoKnowledge() throws Exception {
    // JUnitDoclet begin method getTotalNoKnowledge
    // JUnitDoclet end method getTotalNoKnowledge
  }
  
  public void testCheckInbox() throws Exception {
    // JUnitDoclet begin method checkInbox
    // JUnitDoclet end method checkInbox
  }
  
  public void testClearInbox() throws Exception {
    // JUnitDoclet begin method clearInbox
    Keyword[] x_keywords = new SimpleKeyword[3];
    
    for(int i=0;i<3;i++)
    {
      x_keywords[i] = new SimpleKeyword();	
    }	
     
    Document x_doc = new SimpleDocument(x_keywords);
    Node x_node = new NeuroGridNode(neurogridnetwork,new Random(888),4,2,12);
    ContentMessage x_message = new SimpleContentMessage(3,x_doc.getKeywords(),x_doc,x_node);
    neurogridnode.addMessageToInbox(x_message);
    assertTrue("message location not updated",x_message.getLocation() == neurogridnode);
    assertTrue("message of correct type not in inbox",
                neurogridnode.inboxContainsMessage(x_message).equals("com.neurogrid.simulation.SimpleContentMessage"));

    assertTrue("checkInbox indicates inbox empty",neurogridnode.checkInbox());
    
    neurogridnode.clearInbox();
    
    assertTrue("checkInbox indicated inbox full",!neurogridnode.checkInbox());
    
    // JUnitDoclet end method clearInbox
  }
  
    
  public void testCheckSeen() throws Exception {
    // JUnitDoclet begin method checkInbox
    Keyword[] x_keywords = new SimpleKeyword[3];
    
    for(int i=0;i<3;i++)
    {
      x_keywords[i] = new SimpleKeyword();	
    }	
     
    Document x_doc = new SimpleDocument(x_keywords);
    Node x_node = new NeuroGridNode(neurogridnetwork,new Random(888),4,2,12);
    ContentMessage x_message = new SimpleContentMessage(3,x_doc.getKeywords(),x_doc,x_node);
    ContentMessage x_message2 = new SimpleContentMessage(3,x_doc.getKeywords(),x_doc,x_node);
    neurogridnode.addToSeen(x_message); 
    assertTrue("seen message not indicated as such",neurogridnode.checkSeen(x_message)!=null);
    assertTrue("unseen messageindicated as seen",neurogridnode.checkSeen(x_message2)==null);
    
    
    // JUnitDoclet end method checkInbox
  }
  
  public void testClearGUIDs() throws Exception {
    // JUnitDoclet begin method clearGUIDs
    
    Keyword[] x_keywords = new SimpleKeyword[3];
    
    for(int i=0;i<3;i++)
    {
      x_keywords[i] = new SimpleKeyword();	
    }	
     
    Document x_doc = new SimpleDocument(x_keywords);
    Node x_node = new NeuroGridNode(neurogridnetwork,new Random(888),4,2,12);
    ContentMessage x_message = new SimpleContentMessage(3,x_doc.getKeywords(),x_doc,x_node);
    neurogridnode.addToSeen(x_message);    
    assertTrue("seen message not indicated as such",neurogridnode.checkSeen(x_message)!=null);
    neurogridnode.clearGUIDs();    
    assertTrue("message indicated as seen after cleared",neurogridnode.checkSeen(x_message)==null);
    assertTrue("not all messages cleared",neurogridnode.getNoSeenMessages() == 0);
    
    // JUnitDoclet end method clearGUIDs
  }
  
  public void testClearConnList() throws Exception {
    // JUnitDoclet begin method clearConnList
    
   NeuroGridNode x_node = new NeuroGridNode(neurogridnetwork,new Random(888),4,2,12);
    
    neurogridnode.addConnection(x_node);
    
    assertTrue("failed to add connection",neurogridnode.hasConnection(x_node));
    
    neurogridnode.clearConnList();
    
    assertTrue("clear failed to remove connection",!neurogridnode.hasConnection(x_node));
    assertTrue("no. conns not zero",neurogridnode.getNoConnections() == 0);
    
    
    // JUnitDoclet end method clearConnList
  }
  
  public void testClearContents() throws Exception {
    // JUnitDoclet begin method clearContents
    
    SimpleDocument x_doc = new SimpleDocument(3);
    
    neurogridnode.addContent(x_doc);
    
    assertTrue("content not added",neurogridnode.hasContent(x_doc));    
    
    neurogridnode.clearContents();
    
    assertTrue("clear failed to remove contents",!neurogridnode.hasContent(x_doc));
    assertTrue("no. content not zero",neurogridnode.getNoContents() == 0);
    
    // JUnitDoclet end method clearContents
  }

  public void testGetConnList() throws Exception {
    // JUnitDoclet begin method getConnList
    // JUnitDoclet end method getConnList
  }
  
  public void testAllKeywords() throws Exception {
    // JUnitDoclet begin method allKeywords
    // JUnitDoclet end method allKeywords
  }
  
  public void testRemoveConnection() throws Exception {
    // JUnitDoclet begin method removeConnection
    
    try
    {
      neurogridnode.removeConnection(null);
      fail("Failed to throw exception when adding null connection");	
    }
    catch(Exception e){}

    NeuroGridNode x_node = new NeuroGridNode(neurogridnetwork,new Random(888),4,2,12);
    NeuroGridNode x_node2 = new NeuroGridNode(neurogridnetwork,new Random(888),4,2,12);
    
    neurogridnode.addConnection(x_node);
    neurogridnode.addConnection(x_node2);
    
    assertTrue("connection not added",neurogridnode.hasConnection(x_node));
    assertTrue("connection not added",neurogridnode.hasConnection(x_node2));
    
    neurogridnode.removeConnection(x_node);
    
    assertTrue("connection not removed",!neurogridnode.hasConnection(x_node));
    assertTrue("wrong connection removed",neurogridnode.hasConnection(x_node2));
    
    // could test here if we fall below min connectivity FIXXXXXXXXXXXXX
    
    // JUnitDoclet end method removeConnection
  }
  
  
  public void testAddConnection() throws Exception {
    // JUnitDoclet begin method addConnection
    
    try
    {
      neurogridnode.addConnection(null);
      fail("Failed to throw exception when adding null connection");	
    }
    catch(Exception e){}

    NeuroGridNode x_node = new NeuroGridNode(neurogridnetwork,new Random(888),4,2,12);
    
    neurogridnode.addConnection(x_node);
    
    assertTrue("connection not added",neurogridnode.hasConnection(x_node));
    
    
    // JUnitDoclet end method addConnection
  }
  
  public void testHasConnection() throws Exception {
    // JUnitDoclet begin method hasConnection
    try
    {
      neurogridnode.hasConnection(null);
      fail("Failed to throw exception when checking for null connection");	
    }
    catch(Exception e){}
        
    NeuroGridNode x_node = new NeuroGridNode(neurogridnetwork,new Random(888),4,2,12);
    NeuroGridNode x_node2 = new NeuroGridNode(neurogridnetwork,new Random(888),4,2,12);
    
    neurogridnode.addConnection(x_node);
    
    assertTrue("added connection not found",neurogridnode.hasConnection(x_node));
    assertTrue("unadded connection found",!neurogridnode.hasConnection(x_node2));
    
    // JUnitDoclet end method hasConnection
  }
  
  public void testAddContent() throws Exception {
    // JUnitDoclet begin method addContent
    
    try
    {
      neurogridnode.addContent(null);
      fail("Failed to throw exception when adding null content");	
    }
    catch(Exception e){}

    SimpleDocument x_doc = new SimpleDocument(3);
    
    neurogridnode.addContent(x_doc);
    
    assertTrue(neurogridnode.hasContent(x_doc));    
    // JUnitDoclet end method addContent
  }
  
  public void testHasContent() throws Exception {
    // JUnitDoclet begin method hasContent
    
    try
    {
      neurogridnode.hasContent(null);
      fail("Failed to throw exception when checking for null content");	
    }
    catch(Exception e){}

    SimpleDocument x_doc = new SimpleDocument(3);
    SimpleDocument x_doc2 = new SimpleDocument(3);
    
    neurogridnode.addContent(x_doc);
    
    assertTrue(neurogridnode.hasContent(x_doc));    
    assertTrue(!neurogridnode.hasContent(x_doc2));    
    // JUnitDoclet end method hasContent
  }
  
  public void testHasKeyword() throws Exception {
    // JUnitDoclet begin method hasContent
    
    try
    {
      neurogridnode.hasKeyword(null);
      fail("Failed to throw exception when checking for null content");	
    }
    catch(Exception e){}

    Keyword[] x_keywords = new SimpleKeyword[3];
    Keyword[] x_keywords2 = new SimpleKeyword[3];
    
    for(int i=0;i<3;i++)
    {
      x_keywords[i] = new SimpleKeyword();	
      x_keywords2[i] = new SimpleKeyword();	
    }	

    SimpleDocument x_doc = new SimpleDocument(x_keywords);
    SimpleDocument x_doc2 = new SimpleDocument(x_keywords2);
    
    neurogridnode.addContent(x_doc);

    for(int i=0;i<3;i++)
    {    
      assertTrue("local keyword not indicated",neurogridnode.hasKeyword(x_keywords[i]) == 1);    
      assertTrue("absent keyword identified as local",neurogridnode.hasKeyword(x_keywords2[i]) == 0); 
    }   
    // JUnitDoclet end method hasContent
  }
  
  public void testMatchingDocuments() throws Exception {
    // JUnitDoclet begin method matchingDocuments

    try
    {
      neurogridnode.matchingDocuments(null);
      fail("Failed to throw exception when checking for null content");	
    }
    catch(Exception e){}

    Keyword[] x_keywords = new SimpleKeyword[3];
    Keyword[] x_keywords2 = new SimpleKeyword[3];
    Keyword[] x_keywords3 = new SimpleKeyword[3];
    
    for(int i=0;i<3;i++)
    {
      x_keywords[i] = new SimpleKeyword();	
      x_keywords2[i] = new SimpleKeyword();	
      x_keywords3[i] = new SimpleKeyword();	
    }	

    SimpleDocument x_doc = new SimpleDocument(x_keywords);
    SimpleDocument x_doc2 = new SimpleDocument(x_keywords);
    SimpleDocument x_doc3 = new SimpleDocument(x_keywords2);
    
    neurogridnode.addContent(x_doc);
    neurogridnode.addContent(x_doc2);
    neurogridnode.addContent(x_doc3);

    Set x_set = neurogridnode.matchingDocuments(x_keywords);
    
    assertTrue("not all matching documents found",x_set.size()==2);
    assertTrue("x_doc not found",x_set.contains(x_doc));
    assertTrue("xdoc2 not found",x_set.contains(x_doc2));
    assertTrue("xdoc3 found incorrectly",!x_set.contains(x_doc3));

    // added the following in order to expose NullPointerException error
    // in Node.java - i.e. the following operation
    //      x_docs = (Vector)(o_contents.get(p_keywords[i]));
    //      x_set.addAll(x_docs);
    x_set = neurogridnode.matchingDocuments(x_keywords3);
    assertTrue("match from unrelated keywords",x_set.size()==0);


    // JUnitDoclet end method matchingDocuments
  }
  
  public void testMatchingKeywords() throws Exception {
    // JUnitDoclet begin method matchingKeywords
    // JUnitDoclet end method matchingKeywords
  }
  
  public void testGetContent() throws Exception {
    // JUnitDoclet begin method getContent
    // JUnitDoclet end method getContent
  }
  
  public void testGetContentsByDocID() throws Exception {
    // JUnitDoclet begin method getContentsByDocID
    // JUnitDoclet end method getContentsByDocID
  }
  
  public void testGetRandomContent() throws Exception {
    // JUnitDoclet begin method getRandomContent
    // JUnitDoclet end method getRandomContent
  }
  
  public void testGetRandomKeyword() throws Exception {
    // JUnitDoclet begin method getRandomKeyword
    // JUnitDoclet end method getRandomKeyword
  }
  
  public void testRemoveKnowledge() throws Exception {
    // JUnitDoclet begin method removeKnowledge

    neurogridnode = new NeuroGridNode(neurogridnetwork,new Random(888),4,2,24);

    try
    {
      neurogridnode.removeKnowledge(null,new Keyword[6]);
      fail("Failed to throw exception when removing null knowledge");	
    }
    catch(Exception e){}
    
    Node x_node[] = new NeuroGridNode[2];
    for(int i=0;i<2;i++)
    {
      x_node[i] = new NeuroGridNode(neurogridnetwork,new Random(888),4,2,12);
    }
    
    SimpleKeyword[] x_keywords = new SimpleKeyword[10];
    
    for(int i=0;i<10;i++)
    {
      x_keywords[i] = new SimpleKeyword();	
    }	

    // need to set up some knowledge in NG network

    neurogridnode.addKnowledge(x_node[0], x_keywords);
    neurogridnode.addKnowledge(x_node[1], x_keywords);
    
    Vector x_vector = null;
    
    for(int i=0;i<10;i++)
    {
      System.out.println("x_keywords["+i+"]: "+x_keywords[i]);
      x_vector = neurogridnode.getRecommendation(x_keywords[i]);
      assertTrue("not the two nodes we added",x_vector.size() == 2);
      assertTrue("node[0] not found in the knowledge",x_vector.contains(x_node[0]));
      assertTrue("node[1] not found in the knowledge",x_vector.contains(x_node[1]));
    }

    neurogridnode.removeKnowledge(x_node[1], x_keywords);

    for(int i=0;i<10;i++)
    {
      x_vector = neurogridnode.getRecommendation(x_keywords[i]);
      assertTrue("not the one nodes expected",x_vector.size() == 1);
      assertTrue("node[0] not found in the knowledge",x_vector.firstElement()==x_node[0]);
      assertTrue("node[1] found in the knowledge after being removed",!x_vector.contains(x_node[1]));
    }
    
    // JUnitDoclet end method removeKnowledge
  }
  
  
  public void testAddKnowledge() throws Exception {
    // JUnitDoclet begin method addKnowledge

    try
    {
      neurogridnode.addKnowledge(null,new Keyword[6]);
      fail("Failed to throw exception when adding null knowledge");	
    }
    catch(Exception e){}
    
    Node x_node[] = new NeuroGridNode[2];
    for(int i=0;i<2;i++)
    {
      x_node[i] = new NeuroGridNode(neurogridnetwork,new Random(888),4,2,12);
    }
    
    SimpleKeyword[] x_keywords = new SimpleKeyword[10];
    
    for(int i=0;i<10;i++)
    {
      x_keywords[i] = new SimpleKeyword();	
    }	

    // need to set up some knowledge in NG network

    neurogridnode.addKnowledge(x_node[1], x_keywords);
    
    Vector x_vector = null;
    
    for(int i=0;i<10;i++)
    {
      x_vector = neurogridnode.getRecommendation(x_keywords[i]);
      assertTrue("More than the single knowledge we added",x_vector.size() == 1);
      assertTrue("knowledge not the expected node",x_vector.firstElement() == x_node[1]);
    }
    
    // JUnitDoclet end method addKnowledge
  }
  
  public void testGetRecommendation() throws Exception {
    // JUnitDoclet begin method getRecommendation
    
    try
    {
      neurogridnode.getRecommendation(null);
      fail("Failed to throw exception when getting recommendation with null");	
    }
    catch(Exception e){}
    
    Node x_node[] = new NeuroGridNode[2];
    for(int i=0;i<2;i++)
    {
      x_node[i] = new NeuroGridNode(neurogridnetwork,new Random(888),4,2,12);
    }
    
    SimpleKeyword[] x_keywords = new SimpleKeyword[10];
    SimpleKeyword[] x_keywords2 = new SimpleKeyword[10];
    
    for(int i=0;i<10;i++)
    {
      x_keywords[i] = new SimpleKeyword();	
      x_keywords2[i] = new SimpleKeyword();	
    }	

    // need to set up some knowledge in NG network

    neurogridnode.addKnowledge(x_node[1], x_keywords);
    
    Vector x_vector = null;
    
    for(int i=0;i<10;i++)
    {
      x_vector = neurogridnode.getRecommendation(x_keywords[i]);
      assertTrue("More than the single knowledge we added",x_vector.size() == 1);
      assertTrue("knowledge not the expected node",x_vector.firstElement() == x_node[1]);
      x_vector = neurogridnode.getRecommendation(x_keywords2[i]);
      assertTrue("recommendation for not added keyword",x_vector == null);
    }
    
    // JUnitDoclet end method getRecommendation
  }
    
  public void testGetSortedRecommendation() throws Exception {
    // JUnitDoclet begin method getSortedRecommendation
    
    try
    {
      neurogridnode.getSortedRecommendation(null);
      fail("Failed to throw exception when getting recommendation with null");	
    }
    catch(Exception e){}
    
    Node x_node[] = new NeuroGridNode[4];
    SimpleKeyword[][] x_keywords = new SimpleKeyword[4][3];    
       
    
    for(int i=0;i<4;i++)
    {
      x_node[i] = new NeuroGridNode(neurogridnetwork,new Random(888),4,2,12);
      for(int j=0;j<3;j++)
      {
        x_keywords[i][j] = new SimpleKeyword();	    
      }
    }	
  
    SimpleKeyword[] x_query = new SimpleKeyword[6]; 
    x_query[0] = x_keywords[0][0];
    x_query[1] = x_keywords[0][1];
    x_query[2] = x_keywords[0][2];
    x_query[3] = x_keywords[1][0];
    x_query[4] = x_keywords[2][0];
    x_query[5] = x_keywords[3][0];
    
    SimpleKeyword[] x_unrelated_query = new SimpleKeyword[6]; 
    for(int i=0;i<6;i++)
    { 
      x_unrelated_query[i] = new SimpleKeyword();
    }

    // need to set up some knowledge in NG network

    neurogridnode.addKnowledge(x_node[0], x_keywords[0]);
    neurogridnode.addKnowledge(x_node[1], x_keywords[1]);
    neurogridnode.addKnowledge(x_node[2], x_keywords[2]);
    neurogridnode.addKnowledge(x_node[3], x_keywords[3]);
    
    TreeSet x_tree_set = neurogridnode.getSortedRecommendation(x_query);
    System.out.println(x_tree_set);
    assertTrue("not all four nodes represented",x_tree_set.size() == 4);
    
    NeuroGridRating[] x_rating = new NeuroGridRating[4];
    
    int i=0;
    Iterator x_iter = x_tree_set.iterator();
    while(x_iter.hasNext())
    {
      x_rating[i] = (NeuroGridRating)(x_iter.next());
      System.out.println(i+": "+x_rating[i].intValue()+" - " + x_rating[i].getNode().getNodeID());
      i++;
    }
      
    assertTrue("x_node[0] not first in list",x_rating[0].getNode() == x_node[0]);
    assertTrue("x_node[0] rating not 3",x_rating[0].intValue() == 3);
      
    x_tree_set = neurogridnode.getSortedRecommendation(x_unrelated_query);
    assertTrue("unrelated query generated results",x_tree_set.size() == 0);
    
    // JUnitDoclet end method getSortedRecommendation
  }
  
  public void testHandleMessage() throws Exception {
 // JUnitDoclet begin method handleMessage
    SimpleKeyword[][] x_keywords = new SimpleKeyword[4][3];
    Node x_node[] = new NeuroGridNode[4];
    for(int i=0;i<4;i++)
    {
      for(int j=0;j<3;j++)
      {
        x_keywords[i][j] = new SimpleKeyword();	
      }
      x_node[i] = new NeuroGridNode(neurogridnetwork,new Random(888),4,2,12);
    }	
     
    SimpleDocument[] x_doc = new SimpleDocument[3];
    ContentMessage x_message[] = new SimpleContentMessage[3];

    
    
    neurogridnode.addConnection(x_node[0]);
    neurogridnode.addConnection(x_node[1]);
    neurogridnode.addConnection(x_node[2]);
    neurogridnode.addConnection(x_node[3]);
    
    SimpleKeyword[] x_query = new SimpleKeyword[6]; 
    x_query[0] = x_keywords[0][0];
    x_query[1] = x_keywords[0][1];
    x_query[2] = x_keywords[1][0];
    x_query[3] = x_keywords[1][1];
    x_query[4] = x_keywords[2][0];
    x_query[5] = x_keywords[3][0];
    
    SimpleKeyword[] x_unrelated_query = new SimpleKeyword[6]; 
    for(int i=0;i<6;i++)
    { 
      x_unrelated_query[i] = new SimpleKeyword();
    }

    // need to set up some knowledge in NG network

    neurogridnode.addKnowledge(x_node[0], x_keywords[0]);
    neurogridnode.addKnowledge(x_node[1], x_keywords[1]);
    neurogridnode.addKnowledge(x_node[2], x_keywords[2]);
    neurogridnode.addKnowledge(x_node[3], x_keywords[3]);
    
    neurogridnetwork.o_min_forwarding_degree = 1;
    neurogridnetwork.o_max_forwarding_degree = 2;
    
    for(int k=0;k<3;k++)
    {
      x_doc[k] = new SimpleDocument(x_query);	
      x_message[k] = new SimpleContentMessage(3,x_query,x_doc[k],x_node[3]);
      x_message[k].setPreviousLocation(x_node[3]);
    }

    neurogridnode.addContent(x_doc[0]);  
    
    assertTrue("failed to successfully handle message",
               neurogridnode.handleMessage(x_message[1]));

    assertTrue("node not activated",neurogridnode.getActive());

    assertTrue("Connected knowledgable Node failed to receive message of correct type",
               x_node[0].inboxContainsMessage(x_message[1]).equals("com.neurogrid.simulation.SimpleContentMessage"));
    assertTrue("Connected knowledgable Node failed to receive message of correct type",
               x_node[1].inboxContainsMessage(x_message[1]).equals("com.neurogrid.simulation.SimpleContentMessage"));
    assertTrue("Connected Node exceeding max forward degree received message",
               x_node[2].inboxContainsMessage(x_message[1]) == null);
    assertTrue("Connected Node that sent message re-received message",
               x_node[3].inboxContainsMessage(x_message[1]) == null);
    assertTrue("initial node still has message",
               neurogridnode.inboxContainsMessage(x_message[1]) == null);

    for(int i=0;i<4;i++)
    {
      x_node[i].clearInbox();
    }	               
               
    ContentMessage x_unrelated_message = new SimpleContentMessage(3,
                                                    x_unrelated_query,
                                                    new SimpleDocument(x_unrelated_query),
                                                    x_node[3]);
    x_unrelated_message.setPreviousLocation(x_node[3]);        

    assertTrue("failed to successfully handle message",
               neurogridnode.handleMessage(x_unrelated_message));
               
    int x_no_messages = 0;           
               
    if(x_node[0].inboxContainsMessage(x_unrelated_message) != null) x_no_messages++;
    if(x_node[1].inboxContainsMessage(x_unrelated_message) != null) x_no_messages++;
    if(x_node[2].inboxContainsMessage(x_unrelated_message) != null) x_no_messages++;          
               
    assertTrue("unrelated query not forwarded to only one connected node, x_no_messages="+x_no_messages,
               x_no_messages==1);
    assertTrue("Connected Node that sent message re-received message",
               x_node[3].inboxContainsMessage(x_message[1]) == null);
    assertTrue("initial node still has message",
               neurogridnode.inboxContainsMessage(x_message[1]) == null);


// JUnitDoclet end method handleMessage 
  }
  
  /**
  * JUnitDoclet moves marker to this method, if there is not match
  * for them in the regenerated code and if the marker is not empty.
  * This way, no test gets lost when regenerating after renaming.
  * Method testVault is supposed to be empty.
  */
  public void testVault() throws Exception {
    // JUnitDoclet begin method testcase.testVault

    // JUnitDoclet end method testcase.testVault
  }
  
  public static void main(String[] args) {
    // JUnitDoclet begin method testcase.main
    String x_method = System.getProperty("test.method");
    System.out.println("test.method="+x_method);
    if(x_method == null || x_method.equals(""))
    {
      System.out.println("testing all methods");
    
      junit.textui.TestRunner.run(NeuroGridNodeTest.class);
    }
    else
    {
      System.out.println("testing single method");

      TestSuite suite = new TestSuite();
      suite.addTest(new NeuroGridNodeTest(x_method));
      junit.textui.TestRunner.run(suite);
    }    // JUnitDoclet end method testcase.main
  }
}
