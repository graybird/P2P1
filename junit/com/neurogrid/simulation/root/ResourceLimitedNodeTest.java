package com.neurogrid.simulation.root;

import junit.framework.TestCase;
// JUnitDoclet begin import
import com.neurogrid.simulation.root.ResourceLimitedNode;
import com.neurogrid.simulation.SimpleDocument;
import com.neurogrid.simulation.NeuroGridNode;
import com.neurogrid.simulation.NeuroGridNetwork;
import com.neurogrid.simulation.root.Message;
import com.neurogrid.simulation.root.Document;
import com.neurogrid.simulation.root.Keyword;
import com.neurogrid.simulation.root.Node;

import java.util.Iterator;
import java.util.Vector;
import java.util.Map;
import java.util.Random;
// JUnitDoclet end import

/**
* Generated by JUnitDoclet, a tool provided by
* ObjectFab GmbH under LGPL.
* Please see www.junitdoclet.org, www.gnu.org
* and www.objectfab.de for informations about
* the tool, the licence and the authors.
*/


public class ResourceLimitedNodeTest
// JUnitDoclet begin extends_implements
extends TestCase
// JUnitDoclet end extends_implements
{
  // JUnitDoclet begin class
  com.neurogrid.simulation.root.ResourceLimitedNode resourcelimitednode = null;
  private static final int MAX_NO_CONNS = 2;
  private static final int MIN_NO_CONNS = 2;
  // JUnitDoclet end class
  
  public ResourceLimitedNodeTest(String name) {
    // JUnitDoclet begin method ResourceLimitedNodeTest
    super(name);
    ResourceLimitedNode.init(System.getProperty("Log4jConfig"));
    // JUnitDoclet end method ResourceLimitedNodeTest
  }
  
  public com.neurogrid.simulation.root.ResourceLimitedNode createInstance() throws Exception {
    // JUnitDoclet begin method testcase.createInstance
    return new ResourceLimitedNode(MAX_NO_CONNS,MIN_NO_CONNS,2)
                      {
                      	public boolean processMessage(Message p_message)
                      	  throws Exception
                      	{ return false;}
                      	
                      	public boolean processMessage(Message p_message, boolean p_start)
                      	  throws Exception
                      	{ return false;}
                      	
                      	public boolean addMessageToInbox(Message p_message)
                      	  throws Exception
                      	{ return false;}
                      	  
                      	public void doGraphics(){}
  
                      	public void doGraphics2(){}
                     
                      	public String toString()
                    	{
                          StringBuffer x_buf = new StringBuffer(100);

                          x_buf.append("NODE_ID: ");
                          x_buf.append(o_node_ID);
                          x_buf.append("\n");
                          if(o_conn_list != null)
                          {
                            x_buf.append("CONN_LIST: ");
                            Iterator x_iter = o_conn_list.keySet().iterator();
                            String x_conn = null;
                            while(x_iter.hasNext())
                            {
                              x_conn = (String)(x_iter.next());
                              x_buf.append(x_conn);
                              x_buf.append("::");
                            }
                            x_buf.append("\n");
                          }

                          if(o_contents != null)
                          {
                            Iterator x_iter = o_contents.keySet().iterator();
                            Keyword x_keyword = null;
                            Vector x_documents = null;
                            x_buf.append("CONTENT: ");
                            while(x_iter.hasNext())
                            {
                              x_keyword = (Keyword)(x_iter.next());
                              x_buf.append(x_keyword);
                              x_documents = (Vector)(o_contents.get(x_keyword));
                              x_buf.append("--");
                              for(int j=0;j<x_documents.size();j++)
                              {
                                x_buf.append(((Document)(x_documents.elementAt(j))).getDocumentID());
                                x_buf.append("::");
                              }
                            }
                            x_buf.append("\n");
                          }

                          if(o_knowledge != null)
                          {
                            Iterator x_iter = o_knowledge.entrySet().iterator();
                            Keyword x_keyword = null;
                            Vector x_nodes = null;
                            Map.Entry x_entry = null;
                            x_buf.append("KNOWLEDGE: ");
                            while(x_iter.hasNext())
                            {
                              x_entry = (Map.Entry)(x_iter.next());
                              x_keyword = (Keyword)(x_entry.getKey());
                              x_buf.append(x_keyword);
                              x_nodes = (Vector)(x_entry.getValue());
                              x_buf.append("--");
                              for(int j=0;j<x_nodes.size();j++)
                              {
                                x_buf.append(((Node)(x_nodes.elementAt(j))).getNodeID());
                                x_buf.append("::");
                              }
                            }
                            x_buf.append("\n\n");
                          }
                          return x_buf.toString();
                        }
                      
                      
                      };
    // JUnitDoclet end method testcase.createInstance
  }
  
  protected void setUp() throws Exception {
    // JUnitDoclet begin method testcase.setUp
    super.setUp();
    resourcelimitednode = createInstance();
    // JUnitDoclet end method testcase.setUp
  }
  
  protected void tearDown() throws Exception {
    // JUnitDoclet begin method testcase.tearDown
    resourcelimitednode = null;
    super.tearDown();
    // JUnitDoclet end method testcase.tearDown
  }
  
  public void testGetCvsInfo() throws Exception {
    // JUnitDoclet begin method getCvsInfo
    // JUnitDoclet end method getCvsInfo
  }
  
  public void testInit() throws Exception {
    // JUnitDoclet begin method init
    // JUnitDoclet end method init
  }
  
  public void testGetNewNodeID() throws Exception {
    // JUnitDoclet begin method getNewNodeID
    // JUnitDoclet end method getNewNodeID
  }
  
  public void testSetInactive() throws Exception {
    // JUnitDoclet begin method setInactive
    // JUnitDoclet end method setInactive
  }
  
  public void testSetActive() throws Exception {
    // JUnitDoclet begin method setActive
    // JUnitDoclet end method setActive
  }
  
  public void testGetActive() throws Exception {
    // JUnitDoclet begin method getActive
    // JUnitDoclet end method getActive
  }
  
  public void testGetNodeID() throws Exception {
    // JUnitDoclet begin method getNodeID
    // JUnitDoclet end method getNodeID
  }
  
  public void testGetNoConnections() throws Exception {
    // JUnitDoclet begin method getNoConnections
    // JUnitDoclet end method getNoConnections
  }
  
  public void testGetNoContents() throws Exception {
    // JUnitDoclet begin method getNoContents
    // JUnitDoclet end method getNoContents
  }
  
  public void testGetNoKnowledge() throws Exception {
    // JUnitDoclet begin method getNoKnowledge
    // JUnitDoclet end method getNoKnowledge
  }
  
  public void testGetTotalNoKnowledge() throws Exception {
    // JUnitDoclet begin method getTotalNoKnowledge
    // JUnitDoclet end method getTotalNoKnowledge
  }
  
  public void testCheckInbox() throws Exception {
    // JUnitDoclet begin method checkInbox
    // JUnitDoclet end method checkInbox
  }
  
  public void testClearInbox() throws Exception {
    // JUnitDoclet begin method clearInbox
    // JUnitDoclet end method clearInbox
  }
  
  public void testClearGUIDs() throws Exception {
    // JUnitDoclet begin method clearGUIDs
    // JUnitDoclet end method clearGUIDs
  }
  
  public void testClearConnList() throws Exception {
    // JUnitDoclet begin method clearConnList
    // JUnitDoclet end method clearConnList
  }
  
  public void testClearContents() throws Exception {
    // JUnitDoclet begin method clearContents
    // JUnitDoclet end method clearContents
  }
  
  public void testClearKnowledge() throws Exception {
    // JUnitDoclet begin method clearKnowledge
    // JUnitDoclet end method clearKnowledge
  }
  
  public void testGetConnList() throws Exception {
    // JUnitDoclet begin method getConnList
    // JUnitDoclet end method getConnList
  }
  
  public void testAllKeywords() throws Exception {
    // JUnitDoclet begin method allKeywords
    // JUnitDoclet end method allKeywords
  }
  
  public void testRemoveConnection() throws Exception {
    // JUnitDoclet begin method removeConnection
    
    try
    {
      resourcelimitednode.addConnection(null);
      fail("Failed to throw exception when adding null connection");	
    }
    catch(Exception e){}
    
    Network x_network = new NeuroGridNetwork();

    Node x_node1 = new NeuroGridNode(x_network,new Random(888));
    Node x_node2 = new NeuroGridNode(x_network,new Random(888));
    Node x_node3 = new NeuroGridNode(x_network,new Random(888));
    Node x_node4 = new NeuroGridNode(x_network,new Random(888));
    
    // we are checking that the node that was added the longest time ago
    // will be removed when we exceed the maximum number of connections
    
    resourcelimitednode.addConnection(x_node1);
    
    System.out.println("no conns="+resourcelimitednode.getNoConnections());
    assertTrue("Not the single connection expected",resourcelimitednode.getNoConnections()==1);
    //System.out.println("A: "+resourcelimitednode.getNoConnections());
    //System.out.println("A: "+resourcelimitednode.getConnList());
    resourcelimitednode.addConnection(x_node2);
    assertTrue("Expected two connections, not so",resourcelimitednode.getNoConnections()==2);
    //System.out.println("B: "+resourcelimitednode.getNoConnections());
    //System.out.println("B: "+resourcelimitednode.getConnList());
    resourcelimitednode.addConnection(x_node3);
    assertTrue("Expected two connections, not so",resourcelimitednode.getNoConnections()==2);
    //System.out.println("C: "+resourcelimitednode.getNoConnections());
    //System.out.println("C: "+resourcelimitednode.getConnList());
    
    assertTrue(!resourcelimitednode.hasConnection(x_node1));
    assertTrue(resourcelimitednode.hasConnection(x_node2));
    assertTrue(resourcelimitednode.hasConnection(x_node3));
    
    // could also test that re-inserting a node protects if from being removed ...

    resourcelimitednode.addConnection(x_node2);
    assertTrue(resourcelimitednode.getNoConnections()==2);
    
    resourcelimitednode.addConnection(x_node4);
    assertTrue(resourcelimitednode.getNoConnections()==2);

    assertTrue(!resourcelimitednode.hasConnection(x_node1));
    assertTrue(resourcelimitednode.hasConnection(x_node2));
    assertTrue(!resourcelimitednode.hasConnection(x_node3));    
    assertTrue(resourcelimitednode.hasConnection(x_node4));
    
    // JUnitDoclet end method removeConnection
  }  
  
  public void testAddConnection() throws Exception {
    // JUnitDoclet begin method addConnection
    
    try
    {
      resourcelimitednode.addConnection(null);
      fail("Failed to throw exception when adding null connection");	
    }
    catch(Exception e){}
    
    Network x_network = new NeuroGridNetwork();

    Node x_node1 = new NeuroGridNode(x_network,new Random(888));
    Node x_node2 = new NeuroGridNode(x_network,new Random(888));
    Node x_node3 = new NeuroGridNode(x_network,new Random(888));
    Node x_node4 = new NeuroGridNode(x_network,new Random(888));
    
    // we are checking that the node that was added the longest time ago
    // will be removed when we exceed the maximum number of connections
    
    resourcelimitednode.addConnection(x_node1);
    
    System.out.println("no conns="+resourcelimitednode.getNoConnections());
    assertTrue("Not the single connection expected",resourcelimitednode.getNoConnections()==1);
    //System.out.println("A: "+resourcelimitednode.getNoConnections());
    //System.out.println("A: "+resourcelimitednode.getConnList());
    resourcelimitednode.addConnection(x_node2);
    assertTrue("Expected two connections, not so",resourcelimitednode.getNoConnections()==2);
    //System.out.println("B: "+resourcelimitednode.getNoConnections());
    //System.out.println("B: "+resourcelimitednode.getConnList());
    resourcelimitednode.addConnection(x_node3);
    assertTrue("Expected two connections, not so",resourcelimitednode.getNoConnections()==2);
    //System.out.println("C: "+resourcelimitednode.getNoConnections());
    //System.out.println("C: "+resourcelimitednode.getConnList());
    
    assertTrue(!resourcelimitednode.hasConnection(x_node1));
    assertTrue(resourcelimitednode.hasConnection(x_node2));
    assertTrue(resourcelimitednode.hasConnection(x_node3));
    
    // could also test that re-inserting a node protects if from being removed ...

    resourcelimitednode.addConnection(x_node2);
    assertTrue(resourcelimitednode.getNoConnections()==2);
    
    resourcelimitednode.addConnection(x_node4);
    assertTrue(resourcelimitednode.getNoConnections()==2);

    assertTrue(!resourcelimitednode.hasConnection(x_node1));
    assertTrue(resourcelimitednode.hasConnection(x_node2));
    assertTrue(!resourcelimitednode.hasConnection(x_node3));    
    assertTrue(resourcelimitednode.hasConnection(x_node4));
    
    // JUnitDoclet end method addConnection
  }
  
  public void testHasConnection() throws Exception {
    // JUnitDoclet begin method hasConnection
    try
    {
      resourcelimitednode.hasConnection(null);
      fail("Failed to throw exception when checking for null connection");	
    }
    catch(Exception e){}
    
    Network x_network = new NeuroGridNetwork();

        
    Node x_node = new NeuroGridNode(x_network,new Random(888));
    Node x_node2 = new NeuroGridNode(x_network,new Random(888));
    
    resourcelimitednode.addConnection(x_node);
    
    assertTrue("node does not have expected connection",resourcelimitednode.hasConnection(x_node));
    assertTrue("connected to unexpected node",!resourcelimitednode.hasConnection(x_node2));
    
    // JUnitDoclet end method hasConnection
  }
  
  public void testAddContent() throws Exception {
    // JUnitDoclet begin method addContent
    
    try
    {
      resourcelimitednode.addContent(null);
      fail("Failed to throw exception when adding null content");	
    }
    catch(Exception e){}

    SimpleDocument x_doc = new SimpleDocument(3);
    
    resourcelimitednode.addContent(x_doc);
    
    assertTrue(resourcelimitednode.hasContent(x_doc));    
    // JUnitDoclet end method addContent
  }
  
  public void testhasContent() throws Exception {
    // JUnitDoclet begin method hasContent
    
    try
    {
      resourcelimitednode.hasContent(null);
      fail("Failed to throw exception when checking for null content");	
    }
    catch(Exception e){}

    SimpleDocument x_doc = new SimpleDocument(3);
    SimpleDocument x_doc2 = new SimpleDocument(3);
    
    resourcelimitednode.addContent(x_doc);
    
    assertTrue(resourcelimitednode.hasContent(x_doc));    
    assertTrue(!resourcelimitednode.hasContent(x_doc2));    
    // JUnitDoclet end method hasContent
  }
  
  public void testMatchingKeywords() throws Exception {
    // JUnitDoclet begin method matchingKeywords
    // JUnitDoclet end method matchingKeywords
  }
  
  public void testGetContent() throws Exception {
    // JUnitDoclet begin method getContent
    // JUnitDoclet end method getContent
  }
  
  public void testGetContentsByDocID() throws Exception {
    // JUnitDoclet begin method getContentsByDocID
    // JUnitDoclet end method getContentsByDocID
  }
  
  public void testGetRandomContent() throws Exception {
    // JUnitDoclet begin method getRandomContent
    // JUnitDoclet end method getRandomContent
  }
  
  public void testGetRandomKeyword() throws Exception {
    // JUnitDoclet begin method getRandomKeyword
    // JUnitDoclet end method getRandomKeyword
  }
  
  public void testAddKnowledge() throws Exception {
    // JUnitDoclet begin method addKnowledge
    // JUnitDoclet end method addKnowledge
  }
  
  public void testGetRecommendation() throws Exception {
    // JUnitDoclet begin method getRecommendation
    // JUnitDoclet end method getRecommendation
  }
  
  
  
  /**
  * JUnitDoclet moves marker to this method, if there is not match
  * for them in the regenerated code and if the marker is not empty.
  * This way, no test gets lost when regenerating after renaming.
  * Method testVault is supposed to be empty.
  */
  public void testVault() throws Exception {
    // JUnitDoclet begin method testcase.testVault
    // JUnitDoclet end method testcase.testVault
  }
  
  public static void main(String[] args) {
    // JUnitDoclet begin method testcase.main
    junit.textui.TestRunner.run(ResourceLimitedNodeTest.class);
    // JUnitDoclet end method testcase.main
  }
}
