package com.neurogrid.simulation.root;

import junit.framework.TestCase;
// JUnitDoclet begin import
import com.neurogrid.simulation.root.NetworkParameters;
import java.util.Properties;
// JUnitDoclet end import

/**
* Generated by JUnitDoclet, a tool provided by
* ObjectFab GmbH under LGPL.
* Please see www.junitdoclet.org, www.gnu.org
* and www.objectfab.de for informations about
* the tool, the licence and the authors.
*/


public class NetworkParametersTest
// JUnitDoclet begin extends_implements
extends TestCase
// JUnitDoclet end extends_implements
{
  // JUnitDoclet begin class
  com.neurogrid.simulation.root.NetworkParameters networkparameters = null;
  // JUnitDoclet end class
  
  public NetworkParametersTest(String name) {
    // JUnitDoclet begin method NetworkParametersTest
    super(name);
    // JUnitDoclet end method NetworkParametersTest
  }
  
  public com.neurogrid.simulation.root.NetworkParameters createInstance() throws Exception {
    // JUnitDoclet begin method testcase.createInstance
    return new com.neurogrid.simulation.root.NetworkParameters();
    // JUnitDoclet end method testcase.createInstance
  }
  
  protected void setUp() throws Exception {
    // JUnitDoclet begin method testcase.setUp
    super.setUp();
    networkparameters = createInstance();
    // JUnitDoclet end method testcase.setUp
  }
  
  protected void tearDown() throws Exception {
    // JUnitDoclet begin method testcase.tearDown
    networkparameters = null;
    super.tearDown();
    // JUnitDoclet end method testcase.tearDown
  }
  
  public void testGetCvsInfo() throws Exception {
    // JUnitDoclet begin method getCvsInfo
    // JUnitDoclet end method getCvsInfo
  }
  
  public void testWriteToLog() throws Exception {
    // JUnitDoclet begin method writeToLog
    // JUnitDoclet end method writeToLog
  }

    String o_sim_type = "NeuroGrid";

    int o_no_keywords = 1;
    int o_no_documents = 2;
    int o_no_keywords_per_document = 3;
    int o_no_nodes = 4;
    int o_no_honest_nodes = 5;
    int o_no_documents_per_node = 6;
    int o_max_knowledge_per_node = 7;
    int o_no_connections_per_node = 8;
    int o_min_connections_per_node = 141;
    int o_max_connections_per_node = 9;
    int o_no_search_keywords = 18;
  
    int o_start_TTL = 10;
  
    int o_max_forwarding_degree = 11;
    int o_min_forwarding_degree = 12;
    int o_internal_loop = 13;
    int o_probe_loop = 14;
    int o_no_probes = 15;
    int o_growth_loop = 16;
    int o_stats_loop = 17;
  
    boolean o_ring_topology = true;
    boolean o_reciprocal_connections = false;
    boolean o_zipf_distribution = true;
    boolean o_node_doc_zipf_distribution = false;
    boolean o_random_searches = true;
    boolean o_random_forwarding = false;
    boolean o_fuzzy_searches = false;
    boolean o_applet = true;
    Properties x_properties = new Properties();
  
  public void testParse() throws Exception {
    // JUnitDoclet begin method parse
 

 
    

    
    singleHit();
    
    o_sim_type = "NeuroGrid";

    o_no_keywords = 18;
    o_no_documents = 17;
    o_no_keywords_per_document = 16;
    o_no_nodes = 15;
    o_no_honest_nodes = 14;
    o_no_documents_per_node = 13;
    o_max_knowledge_per_node = 12;
    o_no_connections_per_node = 11;
    o_min_connections_per_node = 141;
    o_max_connections_per_node = 10;
    o_no_search_keywords = 9;
  
    o_start_TTL = 8;
  
    o_max_forwarding_degree = 7;
    o_min_forwarding_degree = 6;
    o_internal_loop = 5;
    o_probe_loop = 4;
    o_no_probes = 3;
    o_growth_loop = 2;
    o_stats_loop = 1;
  
    o_ring_topology = false;
    o_reciprocal_connections = true;
    o_zipf_distribution = false;
    o_node_doc_zipf_distribution = true;
    o_random_searches = false;
    o_random_forwarding = true;
    o_fuzzy_searches = true;
    o_applet = false;
    
    singleHit();
    
    // JUnitDoclet end method parse
  }
  
  private void singleHit()
  {
    x_properties.setProperty(NetworkParameters.SIMULATION_TYPE,o_sim_type);
    x_properties.setProperty(NetworkParameters.NO_KEYWORDS,Integer.toString(o_no_keywords));
    x_properties.setProperty(NetworkParameters.NO_DOCUMENTS,Integer.toString(o_no_documents));
    x_properties.setProperty(NetworkParameters.NO_KEYWORDS_PER_DOCUMENT,Integer.toString(o_no_keywords_per_document));
    x_properties.setProperty(NetworkParameters.NO_NODES,Integer.toString(o_no_nodes));
    x_properties.setProperty(NetworkParameters.NO_HONEST_NODES,Integer.toString(o_no_honest_nodes));
    x_properties.setProperty(NetworkParameters.NO_DOCUMENTS_PER_NODE,Integer.toString(o_no_documents_per_node));
    x_properties.setProperty(NetworkParameters.MAX_KNOWLEDGE_PER_NODE,Integer.toString(o_max_knowledge_per_node));
    x_properties.setProperty(NetworkParameters.NO_CONNECTIONS_PER_NODE,Integer.toString(o_no_connections_per_node));
    x_properties.setProperty(NetworkParameters.MIN_CONNECTIONS_PER_NODE,Integer.toString(o_min_connections_per_node));
    x_properties.setProperty(NetworkParameters.MAX_CONNECTIONS_PER_NODE,Integer.toString(o_max_connections_per_node));
    x_properties.setProperty(NetworkParameters.NO_SEARCH_KEYWORDS,Integer.toString(o_no_search_keywords));
    x_properties.setProperty(NetworkParameters.START_TTL,Integer.toString(o_start_TTL));
    x_properties.setProperty(NetworkParameters.MAX_FORWARDING_DEGREE,Integer.toString(o_max_forwarding_degree));
    x_properties.setProperty(NetworkParameters.MIN_FORWARDING_DEGREE,Integer.toString(o_min_forwarding_degree));
    x_properties.setProperty(NetworkParameters.INTERNAL_LOOP,Integer.toString(o_internal_loop));
    x_properties.setProperty(NetworkParameters.PROBE_LOOP,Integer.toString(o_probe_loop));
    x_properties.setProperty(NetworkParameters.NO_PROBES,Integer.toString(o_no_probes));
    x_properties.setProperty(NetworkParameters.GROWTH_LOOP,Integer.toString(o_growth_loop));
    x_properties.setProperty(NetworkParameters.STATS_LOOP,Integer.toString(o_stats_loop));
    x_properties.setProperty(NetworkParameters.RING_TOPOLOGY,Boolean.toString(o_ring_topology));
    x_properties.setProperty(NetworkParameters.RECIPROCAL_CONNECTIONS,Boolean.toString(o_reciprocal_connections));
    x_properties.setProperty(NetworkParameters.DOC_KEYWORD_ZIPF_DISTRIBUTION,Boolean.toString(o_zipf_distribution));
    x_properties.setProperty(NetworkParameters.NODE_DOC_ZIPF_DISTRIBUTION,Boolean.toString(o_node_doc_zipf_distribution));
    x_properties.setProperty(NetworkParameters.RANDOM_SEARCHES,Boolean.toString(o_random_searches));
    x_properties.setProperty(NetworkParameters.RANDOM_FORWARDING,Boolean.toString(o_random_forwarding));
    x_properties.setProperty(NetworkParameters.FUZZY_SEARCHES,Boolean.toString(o_fuzzy_searches));
    x_properties.setProperty(NetworkParameters.APPLET,Boolean.toString(o_applet));
    
    networkparameters.parse(x_properties);
    
    assertTrue("o_sim_type incorrect",networkparameters.o_sim_type == o_sim_type);
    
    assertTrue("o_no_keywords incorrect",
               networkparameters.o_no_keywords == o_no_keywords);
    assertTrue("o_no_documents incorrect",
               networkparameters.o_no_documents == o_no_documents);
    assertTrue("o_no_keywords_per_document incorrect",
               networkparameters.o_no_keywords_per_document == o_no_keywords_per_document);
    assertTrue("o_no_nodes incorrect",
               networkparameters.o_no_nodes == o_no_nodes);
    assertTrue("o_no_honest_nodes incorrect",
               networkparameters.o_no_honest_nodes == o_no_honest_nodes);
    assertTrue("o_no_documents_per_node incorrect",
               networkparameters.o_no_documents_per_node == o_no_documents_per_node);
    assertTrue("o_max_knowledge_per_node incorrect",
               networkparameters.o_max_knowledge_per_node == o_max_knowledge_per_node);
    assertTrue("o_no_connections_per_node incorrect",
               networkparameters.o_no_connections_per_node == o_no_connections_per_node);
    assertTrue("o_min_connections_per_node incorrect",
               networkparameters.o_min_connections_per_node == o_min_connections_per_node);
    assertTrue("o_max_connections_per_node incorrect",
               networkparameters.o_max_connections_per_node == o_max_connections_per_node);
    assertTrue("o_no_search_keywords incorrect",
               networkparameters.o_no_search_keywords == o_no_search_keywords);

    assertTrue("o_start_TTL incorrect",
               networkparameters.o_start_TTL == o_start_TTL);

    assertTrue("o_internal_loop incorrect",
               networkparameters.o_internal_loop == o_internal_loop);
    assertTrue("o_probe_loop incorrect",
               networkparameters.o_probe_loop == o_probe_loop);
    assertTrue("o_no_probes incorrect",
               networkparameters.o_no_probes == o_no_probes);
    assertTrue("o_growth_loop incorrect",
               networkparameters.o_growth_loop == o_growth_loop);
    assertTrue("o_stats_loop incorrect",
               networkparameters.o_stats_loop == o_stats_loop);

  

    assertTrue("o_ring_topology incorrect",
               networkparameters.o_ring_topology == o_ring_topology);
    assertTrue("o_reciprocal_connections incorrect",
               networkparameters.o_reciprocal_connections == o_reciprocal_connections);
    assertTrue("o_zipf_distribution incorrect",
               networkparameters.o_zipf_distribution == o_zipf_distribution);
    assertTrue("o_node_doc_zipf_distribution incorrect",
               networkparameters.o_node_doc_zipf_distribution == o_node_doc_zipf_distribution);
    assertTrue("o_random_searches incorrect",
               networkparameters.o_random_searches == o_random_searches);
    assertTrue("o_random_forwarding incorrect",
               networkparameters.o_random_forwarding == o_random_forwarding);
    assertTrue("o_fuzzy_searches incorrect",
               networkparameters.o_fuzzy_searches == o_fuzzy_searches);

    assertTrue("o_applet",
               networkparameters.o_applet == o_applet);

	
  	
  }
  
  /**
  * JUnitDoclet moves marker to this method, if there is not match
  * for them in the regenerated code and if the marker is not empty.
  * This way, no test gets lost when regenerating after renaming.
  * Method testVault is supposed to be empty.
  */
  public void testVault() throws Exception {
    // JUnitDoclet begin method testcase.testVault
    // JUnitDoclet end method testcase.testVault
  }
  
  public static void main(String[] args) {
    // JUnitDoclet begin method testcase.main
    junit.textui.TestRunner.run(NetworkParametersTest.class);
    // JUnitDoclet end method testcase.main
  }
}
