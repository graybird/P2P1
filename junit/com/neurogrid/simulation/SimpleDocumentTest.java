package com.neurogrid.simulation;

import junit.framework.TestCase;
// JUnitDoclet begin import
import com.neurogrid.simulation.SimpleDocument;
// JUnitDoclet end import

/**
* Generated by JUnitDoclet, a tool provided by
* ObjectFab GmbH under LGPL.
* Please see www.junitdoclet.org, www.gnu.org
* and www.objectfab.de for informations about
* the tool, the licence and the authors.
*/


public class SimpleDocumentTest
// JUnitDoclet begin extends_implements
extends TestCase
// JUnitDoclet end extends_implements
{
  // JUnitDoclet begin class
  com.neurogrid.simulation.SimpleDocument simpledocument = null;
  // JUnitDoclet end class
  
  public SimpleDocumentTest(String name) {
    // JUnitDoclet begin method SimpleDocumentTest
    super(name);
    // JUnitDoclet end method SimpleDocumentTest
  }
  
  public com.neurogrid.simulation.SimpleDocument createInstance() throws Exception {
    // JUnitDoclet begin method testcase.createInstance
    return new com.neurogrid.simulation.SimpleDocument(6);
    // JUnitDoclet end method testcase.createInstance
  }
  
  protected void setUp() throws Exception {
    // JUnitDoclet begin method testcase.setUp
    super.setUp();
    simpledocument = createInstance();
    // JUnitDoclet end method testcase.setUp
  }
  
  protected void tearDown() throws Exception {
    // JUnitDoclet begin method testcase.tearDown
    simpledocument = null;
    super.tearDown();
    // JUnitDoclet end method testcase.tearDown
  }
  
  public void testGetCvsInfo() throws Exception {
    // JUnitDoclet begin method getCvsInfo
    // JUnitDoclet end method getCvsInfo
  }
  
  public void testInit() throws Exception {
    // JUnitDoclet begin method init
    // JUnitDoclet end method init
  }
  
  public void testGetFormattedDocumentID() throws Exception {
    // JUnitDoclet begin method getFormattedDocumentID
    // JUnitDoclet end method getFormattedDocumentID
  }
  
  public void testHasKeyword() throws Exception {
    // JUnitDoclet begin method getFormattedDocumentID
    SimpleKeyword[] x_keywords = new SimpleKeyword[3];
    SimpleKeyword[] x_keywords2 = new SimpleKeyword[3];
    
    for(int i=0;i<3;i++)
    {
      x_keywords[i] = new SimpleKeyword();	
      x_keywords2[i] = new SimpleKeyword();	
    }	
     
    SimpleDocument x_doc = new SimpleDocument(x_keywords);    
    SimpleDocument x_doc2 = new SimpleDocument(x_keywords2);   
    
    for(int i=0;i<3;i++)
    {
      assertTrue("x_doc not shown as having all relevant keywords",x_doc.hasKeyword(x_keywords[i]));	
      assertTrue("x_doc2 not shown as having all relevant keywords",x_doc2.hasKeyword(x_keywords2[i]));	
      assertTrue("x_doc2 shown as having absent keywords",!x_doc2.hasKeyword(x_keywords[i]));	
      assertTrue("x_doc not shown as having absent keywords",!x_doc.hasKeyword(x_keywords2[i]));	
    }	     
    
    // JUnitDoclet end method getFormattedDocumentID
  }
  
  public void testToString() throws Exception {
    // JUnitDoclet begin method toString
    // JUnitDoclet end method toString
  }
  
  public void testMain() throws Exception {
    // JUnitDoclet begin method main
    // JUnitDoclet end method main
  }
  
  
  
  /**
  * JUnitDoclet moves marker to this method, if there is not match
  * for them in the regenerated code and if the marker is not empty.
  * This way, no test gets lost when regenerating after renaming.
  * Method testVault is supposed to be empty.
  */
  public void testVault() throws Exception {
    // JUnitDoclet begin method testcase.testVault
    // JUnitDoclet end method testcase.testVault
  }
  
  public static void main(String[] args) {
    // JUnitDoclet begin method testcase.main
    junit.textui.TestRunner.run(SimpleDocumentTest.class);
    // JUnitDoclet end method testcase.main
  }
}
